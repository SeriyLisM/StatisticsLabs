import math
import matplotlib.pyplot as plt 

n = int(input("Введите количество экспериментов n: "))
if n <= 0:
    print("Количество экспериментов должно быть положительным.")
    exit()

data = []
for i in range(n):
    while True:
        try:
            value = float(input(f"Введите значение x{i+1}: "))
            data.append(value)
            break
        except ValueError:
            print("Пожалуйста, введите числовое значение.")

with open("data.txt", "w") as f:
    for value in data:
        f.write(f"{value}\n")
print("Данные сохранены в файл data.txt")

x_mean = sum(data) / n
s_squared = sum((x - x_mean)**2 for x in data) / (n - 1)

print(f"\nВыборочная средняя: {x_mean:.4f}")
print(f"Оценка дисперсии: {s_squared:.4f}")

xmin = min(data)
xmax = max(data)
R = xmax - xmin

if R == 0:
    print("Все значения в выборке одинаковы. Построение гистограммы невозможно.")
    exit()

k = int(round(1 + 3.22 * math.log10(n)))  # Формула Стерджесса
if k < 1:
    k = 1
Delta_x = R / k

# Создание интервалов и подсчет частот
intervals = []
frequencies = []
relative_frequencies = []

current_min = xmin
for i in range(k):
    current_max = current_min + Delta_x if i < k - 1 else xmax
    intervals.append((current_min, current_max))
    
    # Подсчет значений, попавших в интервал
    if i < k - 1:
        count = sum(1 for x in data if current_min <= x < current_max)
    else: 
        count = sum(1 for x in data if current_min <= x <= current_max)
    
    frequencies.append(count)
    relative_freq = count / n
    relative_frequencies.append(relative_freq)
    
    current_min = current_max

print("\nЭмпирический закон распределения:")
print("-" * 80)
print(f"{'Интервал':<25} {'Частота (ni)':<15} {'Относ. частота (ni/n)':<20} {'Высота гист. (ni/n)/Δx':<20}")
print("-" * 80)
for i in range(k):
    interval_str = f"[{intervals[i][0]:.2f}; {intervals[i][1]:.2f})"
    if i == k - 1:
        interval_str = f"[{intervals[i][0]:.2f}; {intervals[i][1]:.2f}]"
    rel_freq = relative_frequencies[i]
    height = rel_freq / Delta_x
    print(f"{interval_str:<25} {frequencies[i]:<15} {rel_freq:<20.4f} {height:<20.4f}")
print("-" * 80)

# Подготовка данных для гистограммы
interval_bounds = [xmin + i * Delta_x for i in range(k + 1)]
heights = [rf / Delta_x for rf in relative_frequencies]

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1) # 1 строка, 2 столбца, 1й график
plt.bar(interval_bounds[:-1], heights, width=Delta_x, edgecolor='black', alpha=0.7)
plt.title('Гистограмма (Относительные частоты / Δx)')
plt.xlabel('Значения X')
plt.ylabel('Плотность частоты (ni/n)/Δx')
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.subplot(1, 2, 2) # 1 строка, 2 столбца, 2й график
# Подготовка точек для ступенчатой функции
x_F = [xmin] 
y_F = [0.0] 
for i in range(k):
    x_start, x_end = intervals[i]
    cumulative_freq = sum(relative_frequencies[:i+1])
    # Добавляем точку разрыва 
    x_F.append(x_end)
    y_F.append(y_F[-1]) # Значение до прыжка
    x_F.append(x_end)
    y_F.append(cumulative_freq) # Значение после прыжка

plt.plot(x_F, y_F, drawstyle='steps-post', marker='o', markersize=4, markevery=2)
plt.title('Статистическая функция распределения F*(x)')
plt.xlabel('Значения X')
plt.ylabel('F*(x)')
plt.grid(True, linestyle='--', alpha=0.7)
plt.ylim(0, 1)

plt.tight_layout() 
plt.show() 
